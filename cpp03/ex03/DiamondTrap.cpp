/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   DiamondTrap.cpp                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aneumann <aneumann@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/05 14:06:31 by aneumann          #+#    #+#             */
/*   Updated: 2025/05/13 15:35:12 by aneumann         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "DiamondTrap.hpp"

DiamondTrap::DiamondTrap() : ClapTrap("Default_clap_name"), FragTrap(), ScavTrap() {
    std::cout << "DiamondTrap default constructor called" << std::endl;
    _name = "Default";
    
    // Herite des attributs des classes parentes
    _hitPoints = FragTrap::_hitPoints;       // 100 de FragTrap
    _attackDamage = 30; // 30 de FragTrap, Explication en bas
    _energyPoints = ScavTrap::_energyPoints; // 50 de ScavTrap
}

DiamondTrap::DiamondTrap(const std::string& name) 
    : ClapTrap(name + "_clap_name"), FragTrap(name + "_clap_name"), ScavTrap(name + "_clap_name") {
    std::cout << "DiamondTrap " << name << " constructor called" << std::endl;
    _name = name;
    
    // Idem Herite des attributs des classes parentes
    _hitPoints = FragTrap::_hitPoints;
    _attackDamage = 30;// 30 de FragTrap , explication en bas
    _energyPoints = ScavTrap::_energyPoints;
}

DiamondTrap::DiamondTrap(const DiamondTrap& src) 
    : ClapTrap(src), FragTrap(src), ScavTrap(src) {
    std::cout << "DiamondTrap copy constructor called" << std::endl;
    *this = src;
}

DiamondTrap::~DiamondTrap() {
    std::cout << "DiamondTrap " << _name << " destructor called" << std::endl;
}

DiamondTrap& DiamondTrap::operator=(const DiamondTrap& rhs) {
    std::cout << "DiamondTrap assignment operator called" << std::endl;
    if (this != &rhs) {
        ClapTrap::operator=(rhs);
        _name = rhs._name;
    }
    return *this;
}

void DiamondTrap::whoAmI() {
    std::cout << "I am DiamondTrap " << _name << ", also known as ClapTrap " 
              << ClapTrap::_name << "!" << std::endl;
}

std::string DiamondTrap::getName() const {
    return _name;
}

unsigned int DiamondTrap::getHitPoints() const {
    return _hitPoints;
}

unsigned int DiamondTrap::getEnergyPoints() const {
    return _energyPoints;
}

unsigned int DiamondTrap::getAttackDamage() const {
    return _attackDamage;
}

// Tu ne fais pas une affectation Ã  une variable statique, tu fais une affectation Ã  la variable membre _attackDamage de ton instance courante, en prenant la valeur de celle de FragTrap.
// Mais comme tous les attributs (_attackDamage, etc.) viennent de ClapTrap, il nâ€™existe quâ€™une seule instance de _attackDamage par DiamondTrap.
// Or, regarde lâ€™ordre des appels de constructeurs :
// ClapTrap -> FragTrap -> ScavTrap -> DiamondTrap
// ğŸ§¨ Le bug se produit ici :
//     FragTrap initialise _attackDamage = 30
//     Puis ScavTrap rÃ©Ã©crit _attackDamage = 20 (par son constructeur)
//     Ensuite seulement, tu entres dans DiamondTrap, et tu fais :
// _attackDamage = FragTrap::_attackDamage;
// Mais ici, FragTrap::_attackDamage ne veut rien dire ! Tu nâ€™accÃ¨des pas Ã  une variable statique de la classe FragTrap, tu fais simplement rÃ©fÃ©rence Ã  la variable dâ€™instance _attackDamage qui a dÃ©jÃ  Ã©tÃ© modifiÃ©e par le constructeur de ScavTrap avant que tu arrives dans DiamondTrap.
// Donc tu ne rÃ©cupÃ¨res pas 30, mais la valeur actuelle, qui est dÃ©jÃ  Ã©crasÃ©e Ã  20 par ScavTrap.

/*
Dans le cadre de la hiÃ©rarchie dâ€™hÃ©ritage multiple de DiamondTrap, la classe hÃ©rite de deux classes dÃ©rivÃ©es, FragTrap et ScavTrap, elles-mÃªmes hÃ©ritant de ClapTrap. Tous ces types partagent une structure de donnÃ©es commune, notamment les membres protÃ©gÃ©s comme _hitPoints, _energyPoints et _attackDamage, dÃ©clarÃ©s dans la classe de base ClapTrap.
En C++, lâ€™hÃ©ritage multiple entraÃ®ne un comportement dÃ©terminÃ© par lâ€™ordre dâ€™appel des constructeurs des classes parentes, qui se fait de gauche Ã  droite, conformÃ©ment Ã  lâ€™ordre dâ€™apparition dans la dÃ©claration de la classe dÃ©rivÃ©e. Dans ce cas prÃ©cis, le constructeur de DiamondTrap appelle successivement ceux de ClapTrap, FragTrap et ScavTrap, dans cet ordre.
Le problÃ¨me ici rÃ©side dans le fait que, bien que FragTrap initialise _attackDamage Ã  30 dans son constructeur, cette valeur est Ã©crasÃ©e immÃ©diatement aprÃ¨s par le constructeur de ScavTrap, qui la rÃ©initialise Ã  20. Cette redÃ©finition nâ€™est pas visible directement dans le code de DiamondTrap, mais elle rÃ©sulte de lâ€™initialisation de la mÃªme sous-partie ClapTrap partagÃ©e dans lâ€™objet complet.
Il ne sâ€™agit pas de champs statiques, mais bien de membres dâ€™instance hÃ©ritÃ©s, et comme il nâ€™y a quâ€™une seule sous-instance de ClapTrap dans DiamondTrap (pas de duplication grÃ¢ce Ã  lâ€™absence de virtual inheritance), lâ€™attribut _attackDamage est commun Ã  tous les chemins dâ€™hÃ©ritage.
Ainsi, lorsque le constructeur de ScavTrap est exÃ©cutÃ©, il modifie lâ€™Ã©tat de _attackDamage, Ã©crasant la valeur prÃ©cÃ©demment dÃ©finie par FragTrap.
Pour garantir que DiamondTrap hÃ©rite bien de la configuration propre Ã  FragTrap concernant les points dâ€™attaque (ici, 30), il est nÃ©cessaire de rÃ©affecter manuellement la valeur souhaitÃ©e Ã  _attackDamage aprÃ¨s la construction complÃ¨te des classes parentes. Cette rÃ©affectation explicite permet de rÃ©soudre le conflit dâ€™hÃ©ritage non virtuel et dâ€™assurer la cohÃ©rence de lâ€™Ã©tat initial de lâ€™objet DiamondTrap.
Dâ€™oÃ¹ cette ligne dans le constructeur :
_attackDamage = 30;
Elle nâ€™est donc ni arbitraire ni redondante : elle corrige un effet de bord inÃ©vitable causÃ© par lâ€™ordre dâ€™initialisation en prÃ©sence dâ€™hÃ©ritage multiple non virtuel
Elle permet de corriger un effet de bord (câ€™est-Ã -dire une modification involontaire de lâ€™Ã©tat dâ€™un attribut) qui rÃ©sulte de lâ€™ordre dâ€™appel des constructeurs dans une hiÃ©rarchie Ã  hÃ©ritage multiple non virtuel.
En effet, en C++, lorsquâ€™une classe hÃ©rite de plusieurs classes, les constructeurs des classes parentes sont appelÃ©s dans lâ€™ordre oÃ¹ elles sont listÃ©es dans la dÃ©claration de la classe dÃ©rivÃ©e. Mais comme il ne sâ€™agit pas dâ€™un hÃ©ritage virtuel, chaque classe dÃ©rivÃ©e (FragTrap, ScavTrap) agit indÃ©pendamment sur les mÃªmes membres hÃ©ritÃ©s de ClapTrap, puisque ceux-ci sont physiquement prÃ©sents une seule fois dans lâ€™objet final (DiamondTrap).
Dans ce contexte, mÃªme si FragTrap initialise _attackDamage Ã  30, cette valeur est ensuite Ã©crasÃ©e par le constructeur de ScavTrap, qui redÃ©finit _attackDamage Ã  20. Cet Ã©crasement est une consÃ©quence directe du mÃ©canisme dâ€™initialisation automatique des sous-objets dans lâ€™ordre dâ€™hÃ©ritage, et non dâ€™un choix explicite dans DiamondTrap.
Puisquâ€™on ne peut pas interfÃ©rer dans lâ€™ordre dâ€™appel des constructeurs des classes parentes, la seule solution consiste Ã  rÃ©tablir manuellement la valeur souhaitÃ©e aprÃ¨s la fin de cette phase dâ€™initialisation. Câ€™est prÃ©cisÃ©ment le rÃ´le de lâ€™instruction :


*/